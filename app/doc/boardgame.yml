---
openapi: 3.0.3
servers:
- url: /api
components:
  parameters:
    user:
      description: User name
      in: path
      name: user
      required: true
      schema:
        type: string
    game:
      description: Game instance UUID
      in: path
      name: game
      required: true
      schema:
        type: string
    gametype:
      description: Game type name
      in: path
      name: gametype
      required: true
      schema:
        type: string
  schemas:
    User:
      title: User creation
      properties:
        name:
          description: User name, unique
          type: string
        password:
          description: User password
          type: string
      required:
      - name
      - password
      type: object
    PostGame:
      title: Game instance creation
      properties:
        type:
          description: Game type
          type: string
        user:
          description: Current player
          type: string
      required:
      - type
      - user
      type: object
    PutGame:
      title: Game instance modification
      properties:
        currentPlayer:
          description: Current player
          type: string
      required:
      - currentPlayer
      type: object
    Move:
      title: Move making
      properties:
        move:
          description: Move to be made. Format depends on game type
        moveTime:
          description: Time spent making this move in seconds.
          type: integer
      required:
      - move
      - moveTime
      type: object
    GameType:
      title: Game type creation
      properties:
        name:
          description: Game type name, unique
          type: string
        defaultState:
          description: Starting state of the game
          type: string
      required:
      - name
      - defaultState
      type: object
  securitySchemes:
    AdminKeyAuth:
      type: apiKey
      in: header
      name: Api-key
    Username:
      type: apiKey
      in: header
      name: username
    Password:
      type: apiKey
      in: header
      name: password
info:
  title: PWP BoardGame
  version: 0.0.1
  description: |
    This is an API used in the Programmable Web Project course.
    It stores data about games and the users who have played them.
  termsOfService: http://totally.not.placehold.er/
  contact:
    url: http://totally.not.placehold.er/
    email: realaddress@email.net
    name: Boardgame group
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /users/:
    get:
      description: Get a list of all users. User passwords not included
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                items:
                - name: user1
                  '@controls':
                    self:
                      href: /api/users/user1
                - name: user2
                  '@controls':
                    self:
                      href: /api/users/user2
                - name: user3
                  '@controls':
                    self:
                      href: /api/users/user3
                '@namespaces':
                  boardgame:
                    name: /api/link-relations/
                '@controls':
                  boardgame:gametypes-all:
                    method: GET
                    href: /api/game_types/
                  boardgame:games-all:
                    method: GET
                    href: /api/games/
                  boardgame:add-user:
                    method: POST
                    encoding: json
                    schema:
                      type: object
                      required:
                      - name
                      - password
                      properties:
                        name:
                          type: string
                          minLength: 1
                          maxLength: 64
                        password:
                          type: string
                    href: /api/users/
    post: 
      description: Create a new user
      requestBody:
        description: JSON document that contains basic data for a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              name: user1
              password: thisismysupersecretpassword1
      responses:
        '201':
          description: The user was created successfully
          headers:
            Location:
              description: URI of the new user
              schema:
                type: string
        '400':
          description: Invalid Json
        '415':
          description: Unsupported media type. Should be JSON
  /users/{user}:
    parameters:
    - $ref: '#/components/parameters/user'
    get:
      description: Get an user's information. Requires an user to be logged in.
      security:
        - Username: []
          Password: []
      responses:
        '200':
          description: Info successfully returned
          content:
            application/vnd.mason+json:
              example:
                name: user1
                turnsPlayed: 3
                totalTime: 3
                games:
                - id: f4809997a91b46e39da3345d8c749be1
                  type: 1
                  result: -1
                  '@controls':
                    boardgame:game:
                      href: /api/games/f4809997a91b46e39da3345d8c749be1
                '@namespaces':
                  boardgame:
                    name: /api/link-relations/
                '@controls':
                  profile:
                    href: /api/profiles/user/
                  boardgame:users-all:
                    method: GET
                    href: /api/users/
                  boardgame:delete:
                    method: DELETE
                    href: /api/users/user1
                  edit:
                    method: PUT
                    encoding: json
                    schema:
                      type: object
                      required:
                      - name
                      - password
                      properties:
                        name:
                          type: string
                          minLength: 1
                          maxLength: 64
                        password:
                          type: string
                    href: /api/users/user1
        '403':
          description: Permission denied (you need to be logged in)
        '404':
          description: User not found
    put:
      description: Update user information. Requires user authentication
      security:
        - Username: []
          Password: []
      requestBody:
        description: JSON document that contains the updated user information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              name: coolname
              password: securepassword1
      responses:
        '200':
          description: The user was modified successfully
          headers:
            Location:
              description: URI of the modified user
              schema:
                type: string
        '400':
          description: Invalid Json
        '403':
          description: Permission denied
        '415':
          description: Unsupported media type. Should be JSON
    delete:
      description: Delete an user. Requires user authentication
      security:
        - Username: []
          Password: []
      responses:
        '200':
          description: The user was removed successfully
        '403':
          description: Permission denied
  /games/:
    get:
      description: Get a list of all games.
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                items:
                - id: f4809997a91b46e39da3345d8c749be1
                  type: tictactoe
                  result: -1
                  state: 2-XOX-----
                  currentPlayer: null
                  '@controls':
                    self:
                      href: /api/games/f4809997a91b46e39da3345d8c749be1
                '@namespaces':
                  boardgame:
                    name: /api/link-relations/
                '@controls':
                  boardgame:add-game:
                    method: POST
                    encoding: json
                    schema:
                      type: object
                      required:
                      - type
                      - user
                      properties:
                        type:
                          type: string
                        user:
                          type: string
                    href: /api/games/
                  boardgame:users-all:
                    method: GET
                    href: /api/users/
                  boardgame:gametypes-all:
                    method: GET
                    href: /api/game_types/
    post:
      description: Create a new game instance. Admin authentication required.
      security:
        - AdminKeyAuth: []
      requestBody:
        description: JSON document that contains basic data for a new game
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostGame'
            example:
              type: tictactoe
              user: user1
      responses:
        '201':
          description: The game instance was created successfully
          headers:
            Location:
              description: URI of the new game instance
              schema:
                type: string
        '403':
          description: Insufficient authentication
        '409':
          description: This GameType does not exist
        '415':
          description: Unsupported media type. Should be JSON
  /games/{game}:
    parameters:
    - $ref: '#/components/parameters/game'
    get:
      description: Get information about a game instance
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                id: f4809997a91b46e39da3345d8c749be1
                type: tictactoe
                result: -1
                state: 2-XOX-----
                currentPlayer: null
                moveHistory: '[1, 2, 3]'
                players:
                - username: user1
                  '@controls':
                    boardgame:player:
                      href: /api/users/user1
                '@namespaces':
                  boardgame:
                    name: /api/link-relations/
                '@controls':
                  profile:
                    href: /api/profiles/game/
                  boardgame:games-all:
                    method: GET
                    href: /api/games/
                  boardgame:join-game:
                    method: POST
                    href: /api/games/f4809997a91b46e39da3345d8c749be1/join
                  boardgame:make-move:
                    method: POST
                    encoding: json
                    schema:
                      type: object
                      required:
                      - move
                      - moveTime
                      properties:
                        moveTime:
                          type: integer
                    href: /api/games/f4809997a91b46e39da3345d8c749be1/moves
                  edit:
                    method: PUT
                    encoding: json
                    schema:
                      type: object
                      required:
                      - currentPlayer
                      properties:
                        currentPlayer:
                          type: string
                    href: /api/games/f4809997a91b46e39da3345d8c749be1
                  boardgame:delete:
                    method: DELETE
                    href: /api/games/f4809997a91b46e39da3345d8c749be1
        '404':
          description: Game instance not found
    put:
      description: Update game instance information. Admin authentication required
      security:
        - AdminKeyAuth: []
      requestBody:
        description: JSON document that contains a new current player
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutGame'
            example:
              currentPlayer: user2
      responses:
        '200':
          description: The game instance was modified successfully
        '400':
          description: Request body was not valid
        '403':
          description: Insufficient authentication
        '404':
          description: Given game wasn't found
        '415':
          description: Unsupported media type. Should be JSON
    delete:
      description: Delete the game instance. Admin authentication required
      security:
        - AdminKeyAuth: []
      responses:
        '200':
          description: The game instance was removed successfully
        '403':
          description: Insufficient authentication
        '404':
          description: Given game wasn't found
  /games/{game}/moves:
    parameters:
    - $ref: '#/components/parameters/game'
    get:
      description: get the move history of a given game instance
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                moveHistory: '[1, 2, 3]'
                '@controls':
                  up:
                    href: /api/games/f4809997a91b46e39da3345d8c749be1
        '404':
          description: Game instance not found
    post:
      description: The current player can make moves, after which the current player is set to none.
      security:
        - Username: []
          Password: []
      requestBody:
          description: JSON document that contains the next move and movetime of the move. Example move is for tictactoe.
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/Move'
                  example:
                      move: 4
                      moveTime: 5
      responses:
        '200':
          description: Move has been made succesfully new state returned. Example given with tictactoe
          content:
            application/json:
              example: 
                -state: 2----X----
        '400':
          description: Invalid JSON
        '403':
          description: Must log in before making a move
        '409':
          description: This GameType does not exist
        '415':
          description: Unsupported media type. Should be JSON
  /games/{game}/join:
    parameters:
    - $ref: '#/components/parameters/game'
    post:
      description: Try to join a game instance. Returns an error if the game already has a player
      security:
        - Username: []
          Password: []
      responses:
        '200':
          description: Game joined succesfully
          content:
            application/vnd.mason+json:
              example:
                ok: Ok
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                '@controls':
                  boardgame:make-move:
                    encoding: json
                    href: /api/games/4b569771967645a6978dc71904abc470/moves
                    method: POST
                    schema:
                      properties:
                        moveTime:
                          type: integer
                      required:
                      - move
                      - moveTime
                      type: object
        '403':
          description: Must log in before joining a game
        '404':
          description: Game not found
        '409':
          description: Game already has a player
          content:
            application/vnd.mason+json:
              example:
                error: Game already has a player
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                '@controls':
                  boardgame:games-all:
                    href: /api/games/
                    method: GET
  /games/random/{gametype}:
    parameters:
    - $ref: '#/components/parameters/gametype'
    get:
      description: Redirects to the id of an random game with no current player. Requires an user to be logged in.
      security:
        - Username: []
          Password: []
      responses:
        '200':
          description: A game instance was found.
          headers:
            Location:
              description: URI of the game instance
              schema:
                type: string
          content:
            application/vnd.mason+json:
              example:
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                '@controls':
                  boardgame:join-game:
                    href: /api/games/69a25cc03b314b5ca2d56fc8f80ffaeb/join
                    method: POST
        '403':
          description: User authentication required
        '404':
          description: Game type not found
  /game_types/:
    get:
      description: Get a list of all game types.
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                items:
                - name: tictactoe
                  defaultState: 1---------
                  '@controls':
                    self:
                      href: /api/game_types/tictactoe
                '@namespaces':
                  boardgame:
                    name: /api/link-relations/
                '@controls':
                  boardgame:users-all:
                    method: GET
                    href: /api/users/
                  boardgame:games-all:
                    method: GET
                    href: /api/games/
                  boardgame:add-gametype:
                    method: POST
                    encoding: json
                    schema:
                      type: object
                      required:
                      - name
                      - defaultState
                      properties:
                        name:
                          type: string
                          minLength: 1
                          maxLength: 64
                        defaultState:
                          type: string
                          maxLength: 256
                    href: /api/game_types/
    post:
      description: Create a new game type. Admin authentication required.
      security:
        - AdminKeyAuth: []
      requestBody:
        description: JSON document that contains basic data for a new game type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameType'
            example:
              name: tictactoe
              defaultState: 1---------
      responses:
        '201':
          description: The game type was created successfully
          headers:
            Location:
              description: URI of the new gametype
              schema:
                type: string
        '400':
          description: Invalid Json
        '403':
          description: Insufficient authentication
        '415':
          description: Unsupported media type. Should be JSON
  /game_types/{gametype}:
    parameters:
    - $ref: '#/components/parameters/gametype'
    get:
      description: Get a game_type's information
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                name: tictactoe
                defaultState: 1---------
                '@namespaces':
                  boardgame:
                    name: /api/link-relations/
                '@controls':
                  profile:
                    href: /api/profiles/gametype/
                  boardgame:gametypes-all:
                    method: GET
                    href: /api/game_types/
                  boardgame:get-random:
                    method: GET
                    href: /api/games/random/tictactoe
                  edit:
                    method: PUT
                    encoding: json
                    schema:
                      type: object
                      required:
                      - name
                      - defaultState
                      properties:
                        name:
                          type: string
                          minLength: 1
                          maxLength: 64
                        defaultState:
                          type: string
                          maxLength: 256
                    href: /api/game_types/tictactoe
                  boardgame:delete:
                    method: DELETE
                    href: /api/game_types/tictactoe
        '404':
          description: Game type not found
    put:
      description: Update a game type's information. Admin authentication required.
      security:
        - AdminKeyAuth: []
      requestBody:
        description: JSON document that contains a new gametype
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameType'
            example:
              name: tictactoe
              defaultState: 1---------
      responses:
        '200':
          description: The game type was modified successfully
          headers:
            Location:
              description: URI of the modified game type
              schema:
                type: string
        '400':
          description: Invalid Json
        '403':
          description: Permission denied
        '404':
          description: Game type not found
        '415':
          description: Unsupported media type. Should be JSON
    delete:
      description: Delete a game type. Admin authentication required.
      security:
        - AdminKeyAuth: []
      responses:
        '200':
          description: The gametype was removed successfully
        '403':
          description: Permission denied
        '404':
          description: Game type not found
