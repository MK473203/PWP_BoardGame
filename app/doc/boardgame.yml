---
openapi: 3.0.3
servers:
- url: /api
components:
  parameters:
    user:
      description: Selected User
      in: path
      name: user
      required: true
      schema:
        type: string
    game:
      description: Selected Game
      in: path
      name: game
      required: true
      schema:
        type: string
    gametype:
      description: Selected GameType
      in: path
      name: game
      required: true
      schema:
        type: string
  schemas:
    User:
      properties:
        id:
          description: User id, unique
          type: number
          format: int
        name:
          description: User name, unique
          type: string
        password:
          description: User password
          type: string
      required:
      - id
      - name
      - password
      type: object
    Game:
      properties:
        id:
          description: Game id, unique
          type: number
          format: int
        type:
          description: Game type
          type: number
          format: int
      required:
      - id
      - type
      type: object
    GameType:
      properties:
        id:
          description: GameType id, unique
          type: number
          format: int
        name:
          description: Game name, unique
          type: string
      required:
      - id
      - name
      type: object
  securitySchemes:
info:
  title: PWP BoardGame
  version: 0.0.1
  description: |
    This is an API used in the Programmable Web Project course.
    It stores data about games and the users who have played them.
  termsOfService: http://totally.not.placehold.er/
  contact:
    url: http://totally.not.placehold.er/
    email: realaddress@email.net
    name: Boardgame group
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /users/:
    get:
      description: Get a list of all users. User passwords not included
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  boardgame:add-user:
                    encoding: json
                    href: /api/users/
                    method: POST
                    schema:
                      properties:
                        name:
                          maxLength: 64
                          minLength: 1
                          type: string
                        password:
                          type: string
                      required:
                      - name
                      - password
                      type: object
                  boardgame:games-all:
                    href: /api/games/
                    method: GET
                  boardgame:gametypes-all:
                    href: /api/game_types/
                    method: GET
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                items:
                - '@controls':
                    self:
                      href: /api/users/user1
                  name: user1
                - '@controls':
                    self:
                      href: /api/users/user2
                  name: user2
                - '@controls':
                    self:
                      href: /api/users/user3
                  name: user3
    post: 
      description: Create a new user
      requestBody:
          description: JSON document that contains basic data for a new user
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/User'
                  example:
                      name: user1
                      password: thisismysupersecretpassword
      responses:
          '201':
              description: The user was created successfully
              headers:
                  Location:
                      description: URI of the new user
                      schema:
                          type: string
          '400':
              description: Invalid Json
  /users/{user}/:
    get:
      description: Get an user's information. Requires an user to be logged in.
      responses:
        '200':
          description: Info successfully returned
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  profile:
                    href: /api/profiles/user
                  boardgame:delete:
                    href: /api/users/user1
                    method: DELETE
                  boardgame:users-all:
                    href: /api/users/
                    method: GET
                  edit:
                    encoding: json
                    href: /api/users/user1
                    method: PUT
                    schema:
                      properties:
                        name:
                          maxLength: 64
                          minLength: 1
                          type: string
                        password:
                          type: string
                      required:
                      - name
                      - password
                      type: object
                games:
                - '@controls':
                    self:
                      href: /api/games/4b569771967645a6978dc71904abc470
                  id: 4b569771967645a6978dc71904abc470
                  result: -1
                  type: 1
                name: user1
                totalTime: 0
                turnsPlayed: 0
        '403':
          description: Permission denied (you need to be logged in)
        '404':
          description: User not found
    put:
      description: Update user information. Requires user authentication
      parameters:
      - $ref: '#/components/schemas/user'
      requestBody:
          description: JSON document that contains a new current player
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/PutGame'
                  example:
                      currentPlayer: user2
      responses:
          '200':
              description: The user was modified successfully
              headers:
                      Location:
                          description: URI of the modified user
                          schema:
                              -type: string
          '400':
              description: Invalid Json
          '403':
              description: Permission denied
    delete:
      description: Delete an user. Requires user authentication
      parameters:
      - $ref: '#/components/schemas/user'
      responses:
          '200':
              description: The user was removed successfully
          '403':
              description: Permission denied
  /games/:
    get:
      description: Get a list of all games
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  boardgame:add-game:
                    encoding: json
                    href: /api/games/
                    method: POST
                    schema:
                      properties:
                        type:
                          type: string
                        user:
                          type: string
                      required:
                      - type
                      - user
                      type: object
                  boardgame:gametypes-all:
                    href: /api/game_types/
                    method: GET
                  boardgame:get-random:
                    href: /api/games/random/tictactoe
                  boardgame:users-all:
                    href: /api/users/
                    method: GET
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                items:
                - '@controls':
                    self:
                      href: /api/games/15bd5a922e1b48ef9411b0d357660b73
                  currentPlayer: user1
                  id: 15bd5a922e1b48ef9411b0d357660b73
                  result: -1
                  state: 1---------
                  type: tictactoe
    post:
      description: Create a new game instance
      requestBody:
          description: JSON document that contains basic data for a new game
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/PostGame'
                  example:
                      type: tictactoe
                      user: user1
      responses:
          '201':
              description: The game instance was created successfully
              headers:
                  Location:
                      description: URI of the new sensor
                      schema:
                          type: string
          '409':
              description: This GameType does not exist
          '415':
              description: Request content type must be JSON
  /games/{game}/:
    get:
      description: Get information about a game instance
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  profile:
                    href: /api/profiles/game
                  boardgame:delete:
                    href: /api/games/15bd5a922e1b48ef9411b0d357660b73
                    method: DELETE
                  boardgame:games-all:
                    href: /api/games/
                    method: GET
                  boardgame:join-game:
                    href: /api/games/15bd5a922e1b48ef9411b0d357660b73/join
                    method: POST
                  boardgame:make-move:
                    encoding: json
                    href: /api/games/15bd5a922e1b48ef9411b0d357660b73/moves
                    method: POST
                    schema:
                      properties:
                        moveTime:
                          type: integer
                      required:
                      - move
                      - moveTime
                      type: object
                  edit:
                    encoding: json
                    href: /api/games/15bd5a922e1b48ef9411b0d357660b73
                    method: PUT
                    schema:
                      properties:
                        currentPlayer:
        '404':
          description: Game instance not found
    put:
      description: Update game instance information
      parameters:
      - $ref: '#/components/schemas/game'
      requestBody:
          description: JSON document that contains a new current player
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/PutGame'
                  example:
                      currentPlayer: user2
      responses:
          '200':
              description: The game instance was modified successfully
          '400':
              description: Request body was not valid
          '404':
              description: Given user wasn't found
    delete:
      description: Delete the game instance Admin required
      parameters:
      - $ref: '#/components/schemas/game'
      responses:
          '200':
              description: The game instance was removed successfully
  /games/{game}/moves/:
    get:
      description: get the move history of a given game instance
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  up:
                    href: /api/games/15bd5a922e1b48ef9411b0d357660b73
                moveHistory: None
        '404':
          description: Game instance not found
    post:
      description: The current player can make moves, after which the current player is set to none.
      requestBody:
          description: JSON document that contains the next move and movetime of the move. Example move is for tictactoe.
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/MoveGame'
                  example:
                      move: 4
                      moveTime: 5
      responses:
          '200':
              description: Move has been made succesfully new state returned. Example given with tictactoe
              content:
                  application/json:
                      example: 
                          -state: 2X--------
          '400':
              description: Invalid JSON
          '403':
              description: Must log in before making a move
          '409':
              description: This GameType does not exist
          '415':
              description: Request content type must be JSON
  /games/{game}/join/:
    post:
      description: Try to join a game instance. Returns an error if the game already has a player
      responses:
        '200':
          description: Game joined succesfully
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  boardgame:make-move:
                    encoding: json
                    href: /api/games/4b569771967645a6978dc71904abc470/moves
                    method: POST
                    schema:
                      properties:
                        moveTime:
                          type: integer
                      required:
                      - move
                      - moveTime
                      type: object
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                ok: Ok
        '404':
          description: Game not found
        '409':
          description: Game already has a player
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  boardgame:games-all:
                    href: /api/games/
                    method: GET
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                error: Game already has a player
  /games/random/{gametype}/:
    get:
      description: Redirects to the id of an random game with no current player. Should not be spammed!!! Creates a bunch of new games.
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  boardgame:join-game:
                    href: /api/games/69a25cc03b314b5ca2d56fc8f80ffaeb/join
                    method: POST
                '@namespaces':
                  boardgame:
                    name: /boardgame/
        '404':
          description: Game type not found
  /game_types/:
    get:
      description: Get a list of all game types.
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  boardgame:add-gametype:
                    encoding: json
                    href: /api/game_types/
                    method: POST
                    schema:
                      properties:
                        defaultState:
                          maxLength: 256
                          type: string
                        name:
                          maxLength: 64
                          minLength: 1
                          type: string
                      required:
                      - name
                      - defaultState
                      type: object
                  boardgame:games-all:
                    href: /api/games/
                    method: GET
                  boardgame:users-all:
                    href: /api/users/
                    method: GET
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                items:
                - '@controls':
                    self:
                      href: /api/game_types/tictactoe
                  defaultState: 1---------
                  name: tictactoe
    post:
      description: Create a new game type
      requestBody:
          description: JSON document that contains basic data for a new game type
          content:
              application/json:
                  schema:
                      $ref: '#/components/schemas/GameType'
                  example:
                      name: tictactoe
                      defaultState: 1---------
      responses:
          '201':
              description: The game type was created successfully
              headers:
                  Location:
                      description: URI of the new gametype
                      schema:
                          type: string
          '400':
              description: Invalid Json
  /game_types/{gametype}/:
    get:
      description: Get a game_type's information
      responses:
        '200':
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  profile:
                    href: /api/profiles/gametype
                  boardgame:delete:
                    href: /api/game_types/tictactoe
                    method: DELETE
                  boardgame:gametypes-all:
                    href: /api/game_types/
                    method: GET
                  boardgame:get-random:
                    href: /api/games/random/tictactoe
                    method: GET
                  edit:
                    encoding: json
                    href: /api/game_types/tictactoe
                    method: PUT
                    schema:
                      properties:
                        defaultState:
                          maxLength: 256
                          type: string
                        name:
                          maxLength: 64
                          minLength: 1
                          type: string
                      required:
                      - name
                      - defaultState
                      type: object
                '@namespaces':
                  boardgame:
                    name: /boardgame/
                defaultState: 1---------
                name: tictactoe
        '404':
          description: Game type not found
    put:
      description: Update a game type's information. Requires admin privileges
      parameters:
      requestBody:
          description: JSON document that contains a new gametype
          content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/GameType'
                  example:
                      name: tictactoe
                      defaultState: 1---------
      responses:
          '200':
            description: The game type was modified successfully
            headers:
              Location:
                description: URI of the modified game type
                schema:
                  type: string
          '400':
              description: Invalid Json
    delete:
      description: Delete a game type. Requires admin privileges.
      parameters:
      - $ref: '#/components/schemas/gametype'
      responses:
          '200':
              description: The gametype was removed successfully
          '403':
              description: Permission denied
